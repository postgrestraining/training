
SQL> ALTER DATABASE ADD SUPPLEMENTAL LOG DATA;

Database altered.

SQL> shutdown immediate;
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> startup mount;
ORACLE instance started.

Total System Global Area 1526722880 bytes
Fixed Size                  8896832 bytes
Variable Size             939524096 bytes
Database Buffers          570425344 bytes
Redo Buffers                7876608 bytes
Database mounted.
SQL> alter database archivelog;

Database altered.

SQL> alter database open;

Database altered.

ALTER DATABASE ADD SUPPLEMENTAL LOG DATA;
SELECT supplemental_log_data_min FROM v$database;

mkdir -p /softwares/dbs/arch
alter system switch logfile;

select 'ALTER TABLE '||table_name||' ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;' from all_tables where owner = 'HR';

ALTER DATABASE ADD SUPPLEMENTAL LOG DATA (PRIMARY KEY) COLUMNS;

ALTER TABLE REGIONS ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE COUNTRIES ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE LOCATIONS ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE DEPARTMENTS ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE JOBS ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE EMPLOYEES ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE JOB_HISTORY ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;


CLOB DATA
----------

CREATE TABLE clob_data_table (
    id       INTEGER PRIMARY KEY,
    clob_data CLOB
);

DECLARE
    large_text CLOB;
    i          INTEGER := 1;
BEGIN
    DBMS_LOB.createtemporary(large_text, TRUE);

    WHILE i <= 5000 LOOP
        DBMS_LOB.writeappend(large_text, LENGTH('Sentence ' || i || ' of the long text ' || i || '. '), 'Sentence ' || i || ' of the long text ' || i || '. ');
        i := i + 1;
    END LOOP;
	INSERT INTO clob_data_table (id, clob_data) VALUES (1, TO_CLOB(large_text));

 -- Commit the transaction
    COMMIT;
END;
/


SELECT dbms_lob.getlength(clob_data) AS length, dbms_lob.substr(clob_data, 4000, 1) AS first_4000_chars
FROM clob_data_table;


SQL>
SQL> create or replace directory blob_dir as '/home/oracle';

Directory created.

SQL> grant read, write on directory blob_dir to hr;

Grant succeeded.

create table blob_data_table (
  id        number,
  blob_data blob
);

insert into blob_data_table (id, blob_data)
values (1, to_blob(bfilename('BLOB_DIR', 'hr_main.log')));

update blob_data_table
set    blob_data = bfilename('BLOB_DIR', 'hr_main.log')
where  id = 1;


++++

-- Creating the procedure
CREATE OR REPLACE PROCEDURE get_employee_data IS
    -- Declare variables to hold employee data
    v_employee_id   employees.employee_id%TYPE;
    v_first_name    employees.first_name%TYPE;
    v_last_name     employees.last_name%TYPE;
    v_email         employees.email%TYPE;
BEGIN
    -- Open the cursor
    FOR emp_rec IN (SELECT * FROM employees where EMPLOYEE_ID=100) LOOP
        -- Fetch data from the cursor
        v_employee_id := emp_rec.employee_id;
        v_first_name := emp_rec.first_name;
        v_last_name := emp_rec.last_name;
        v_email := emp_rec.email;
        -- Process or display the fetched data (you can modify this part based on your requirements)
        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || v_employee_id || ', Name: ' || v_first_name || ' ' || v_last_name || ', Email: ' || v_email);
    END LOOP;

    -- Close the cursor (implicitly done when the loop finishes)
END;
/

BEGIN
  get_employee_data;
END;
/

+++++
-- Creating the procedure with an explicit cursor
CREATE OR REPLACE PROCEDURE get_employee_data_explicit_cursor IS
    -- Declare variables to hold employee data
    v_employee_id   employees.employee_id%TYPE;
    v_first_name    employees.first_name%TYPE;
    v_last_name     employees.last_name%TYPE;
    v_email         employees.email%TYPE;

    -- Declare the explicit cursor
    CURSOR employee_cursor IS
        SELECT employee_id, first_name, last_name, email
        FROM employees where EMPLOYEE_ID=100;
BEGIN
    -- Open the explicit cursor
    OPEN employee_cursor;

    -- Fetch data from the cursor
    LOOP
        FETCH employee_cursor INTO v_employee_id, v_first_name, v_last_name, v_email;

        -- Exit the loop if no more rows to fetch
        EXIT WHEN employee_cursor%NOTFOUND;

        -- Process or display the fetched data (you can modify this part based on your requirements)
        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || v_employee_id || ', Name: ' || v_first_name || ' ' || v_last_name || ', Email: ' || v_email);
    END LOOP;

    -- Close the explicit cursor
    CLOSE employee_cursor;
END;
/


BEGIN
  get_employee_data_explicit_cursor;
END;
/

++++

CREATE TABLE random_data_table (
    id          INTEGER PRIMARY KEY,
    col1        VARCHAR2(50),  -- VARCHAR in PostgreSQL
    col2        NUMBER,        -- NUMERIC in PostgreSQL
    col3        DATE,          -- DATE in PostgreSQL
    col4        CLOB           -- TEXT in PostgreSQL
);

INSERT INTO random_data_table VALUES (
    1, 'Some text', 42, NULL, 'This is a CLOB value'
);
INSERT INTO random_data_table VALUES (
    2, NULL, NULL, NULL, NULL
);
INSERT INTO random_data_table VALUES (
    3, NULL, 17, NULL, 'Another CLOB value'
);

CREATE OR REPLACE PROCEDURE process_data
AS
BEGIN
    FOR rec IN (SELECT * FROM random_data_table) LOOP
        DBMS_OUTPUT.PUT_LINE(SUBSTR(rec.col1, 1, 5));  -- Will raise issue in PostgreSQL
    END LOOP;
END;
/

BEGIN
  process_data;
END;
/

create table test(idx int, txt clob);

create or replace procedure p_test(P_IDX in number,P_TXT in varchar2,P_FLAG in number) as
g_clob clob;
begin
if P_FLAG=0 then
insert into test values (P_IDX, empty_clob() ) returning txt into g_clob;
dbms_lob.write( g_clob,length(P_TXT), 1,P_TXT);
else
select txt into g_clob from test where IDX=P_IDX for update;
dbms_lob.writeappend( g_clob, length(P_TXT), P_TXT);
end if;
end;


drop table test;

Solutions
==========

ALTER TABLE BLOB_DATA_TABLE ADD CONSTRAINT id_key PRIMARY KEY (id);
create table test(idx int, txt clob);

ALTER TABLE REGIONS ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE COUNTRIES ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE LOCATIONS ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE DEPARTMENTS ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE JOBS ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE EMPLOYEES ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE JOB_HISTORY ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE BLOB_DATA_TABLE ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE CLOB_DATA_TABLE ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
ALTER TABLE RANDOM_DATA_TABLE ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;

